/* Sample Input      Output
   pale , ple     -> True
   pales, pale    -> True
   pale, bale     -> True
   pale, bake     -> False
Time complexity : O(n)
Space complexity : O(n) 
*/
#include <bits/stdc++.h>
using namespace std;

bool isCheckForReplace(string input1,string input2)
{
	if(input1.size() != input2.size()) return false;
	
	int i1 = 0 , i2 = 0, len1 = input1.size() , len2 = input2.size();
	bool foundone = false;
	while(i1 < len1 && i2 < len2)
	{
		if(input1[i1] != input2[i2])
		{
			if(foundone) return false;
			
			foundone = true;
		}
		i1++ , i2++;
	}
	
	return true;
}

bool isCheckForInsertion(string input1, string input2)
{
	int i1 = 0 , i2 = 0, len1 = input1.size() , len2 = input2.size();
	if(len1+1 != len2) return false;
	
	bool foundone = false;
	while(i1 < len1 && i2 < len2)
	{
		if(input1[i1] == input2[i2])
		{
		 i1++ , i2++;
		}
		else if(input1[i1] != input2[i2])
		{
			i2++;
		}
	}

	if(i1 == i2 ) return true;
	
	if((i1 == len1 && i2 != len2) || (i1 != len1 && i2 == len2))
	return false;
	
	return true;
}

bool checkForModify(string input1, string input2)
{
	int len1 = input1.size() , len2 = input2.size();
	if(len1 == len2)
	return isCheckForReplace(input1,input2);

	string first = len1 < len2 ? input1 : input2;
	string second = len1 < len2 ? input2 : input1;
	if(first.size()+1 != second.size()) return false;
	
   
	
	if((len1+1 == len2) || (len1-1 == len2)) 
	return isCheckForInsertion(first, second);
}

int main() {
	string input1, input2;
	cin >> input1 >> input2;
	
	if(checkForModify(input1, input2))
	cout << "True";
	else
	cout << "False";
	
	return 0;
}
